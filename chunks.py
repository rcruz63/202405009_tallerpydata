chunks = [
   "4. More Control Flow Tools introduces various statements such as if and for statements in Python. The if statement can have multiple elif parts and an optional else part. The for statement iterates over items in a sequence in their given order, such as in a list or string. Modifying a collection while iterating over it can be difficult, so it is recommended to loop over a copy instead.",
   "El siguiente texto es una introducción informal a Python, enfocada en la versión 3.12.3. En él se explica cómo utilizar Python como una calculadora, mostrando ejemplos de operaciones aritméticas y la diferencia entre los tipos de números (enteros e flotantes). También se menciona la posibilidad de agregar comentarios en el código y se ofrece una pequeña guía de sintaxis.",
   "El texto trata sobre la documentación de Python 3.12.3, específicamente en el capítulo de estructuras de datos. Se mencionan algunos métodos de listas, como append, extend, insert, remove, pop, clear, index, count, sort, reverse y copy, con sus respectivas explicaciones y ejemplos.",
   "El texto describe la documentación de Python 3.12.3 sobre las estructuras de datos, en particular las listas. Se presentan los métodos disponibles para manipular las listas, como añadir, extender, insertar, eliminar, ordenar y copiar elementos. También se proporciona un ejemplo de cómo utilizar estos métodos.",
   "El capítulo 5. Data Structures de la documentación de Python 3.12.3 describe en detalle algunos métodos del tipo de dato 'list' y añade algunos nuevos. Entre los métodos se encuentran 'append', 'extend', 'insert', 'remove', 'pop', 'clear', 'index', 'count', 'sort', 'reverse' y 'copy'. Se incluye un ejemplo que utiliza la mayoría de estos métodos.",
   "Se presentan más herramientas de control de flujo en Python, como las declaraciones if y for. Estas herramientas permiten ejecutar diferentes bloques de código dependiendo de las condiciones y también iterar sobre secuencias de elementos. Además, se mencionan las declaraciones elif y else, así como la utilidad de la declaración match para comparar valores. También se menciona una diferencia en la declaración for en comparación con otros lenguajes, ya que en Python se pueden iterar sobre cualquier secuencia, no solo números. Por último, se advierte sobre la dificultad de modificar una colección mientras se itera sobre ella, siendo preferible iterar sobre una copia de la misma.",
   "En esta sección, se presentan diferentes herramientas de flujo de control que se utilizarán en el capítulo. Incluye ejemplos de la declaración if y la declaración for, y cómo utilizarlas en Python para iterar sobre diferentes secuencias de datos. También se menciona la declaración match, que puede ser útil al comparar valores o tipos específicos.",
   "El texto es una introducción informal a Python y sus usos. Se explica cómo usar Python como una calculadora, la sintaxis para realizar operaciones matemáticas y el tipo de datos de los números utilizados. También se mencionan los comentarios y la diferencia entre división y división entera.",
   "El texto habla sobre diversas herramientas de control de flujo en Python, como las declaraciones if, ciclos for y la función range. También se mencionan temas como los argumentos y las expresiones lambda en funciones, y se hace referencia a otros temas como la sintaxis básica de Python y las estructuras de datos.",
   "El texto introduce diferentes herramientas de control para Python 3.12.3. Incluye una tabla de contenidos y temas como los siguientes: if statements, for statements, la función range(), break y continue statements, declaraciones pass, y cómo definir funciones y utilizar argumentos. También se describe cómo usar lambdas, cadenas de documentación y anotaciones de funciones. El texto concluye con información sobre el estilo de codificación.",
   "Las excepciones y los errores son comunes en Python y se presentan en dos tipos: errores de sintaxis y excepciones. Los errores de sintaxis se detectan durante la escritura del código y pueden ser corregidos por el usuario. Las excepciones ocurren durante la ejecución del código y pueden ser manejadas por el programa. Los mensajes de error incluyen información sobre el tipo de excepción que ocurrió.",
   "El texto trata sobre las clases y su uso en Python. Se puede crear una nueva clase para definir un nuevo tipo de objeto con sus propios atributos y métodos. Las clases en Python combinan elementos de C++ y Modula-3, permitiendo herencia múltiple, sobrescritura de métodos y llamadas a métodos de la clase base. A diferencia de otros lenguajes, en Python las clases son objetos y se pueden usar tipos de datos integrados como clases base para su extensión. Además, es posible redefinir los operadores con sintaxis especial para instancias de clase.",
   "Las clases en Python permiten agrupar datos y funcionalidades juntos, creando un nuevo tipo de objeto. Cada instancia de clase puede tener atributos y métodos propios, y heredar características de otras clases. Las clases en Python tienen similitudes con las clases en C++ y Modula-3, pero también difieren en ciertos aspectos, como la posibilidad de usar tipos de datos preexistentes como base para nuevas clases.",
   "Los módulos en Python son archivos que contienen definiciones y declaraciones de Python. Pueden ser importados en otros módulos o en el módulo principal. Un módulo es un archivo con extensión '.py' y puede contener funciones que pueden ser llamadas desde otros módulos. Para utilizar un módulo, se debe importar con la palabra clave 'import'.",
   "El texto trata sobre los diversos métodos que se pueden utilizar en Python para presentar la salida de un programa, como imprimir datos en forma legible o escribirlos en un archivo para su uso futuro. Se mencionan tres maneras de formatear la salida: utilizando literales de cadenas formateadas, utilizando el método str.format y manipulando cadenas mediante operaciones de concatenación y corte. En el texto también se explican las diferentes opciones de formato disponibles para cada método.",
   "'argparse es un módulo de Python que facilita la creación de interfaces de línea de comandos amigables para el usuario. Utiliza una instancia de argparse.ArgumentParser para manejar argumentos y opciones. Este objeto tiene opciones generales para el parser y el método add_argument() se utiliza para agregar argumentos específicos. Además, puede manejar argumentos posicionales, opciones con valores y banderas de encendido/apagado'.",
   "El módulo de Python 're' proporciona operaciones de coincidencia de expresiones regulares, que son similares a las de Perl. Los patrones y las cadenas a buscar pueden ser tanto cadenas Unicode como cadenas de 8 bits, pero no pueden mezclarse. Los regex utilizan el carácter de barra invertida ('\') para indicar formas especiales o permitir que se utilicen caracteres especiales sin invocar su significado especial. Esto entra en conflicto con el uso de la barra invertida en las cadenas literales de Python. Por lo tanto, se recomienda utilizar la notación de cadena cruda de Python para los patrones de expresiones regulares. La mayoría de las operaciones de expresiones regulares están disponibles tanto como funciones de nivel de módulo como métodos en expresiones regulares compiladas. Esta es una vista general del módulo de operaciones de expresiones regulares en Python.",
   "El módulo datetime de Python provee clases para manipular fechas y tiempos. Pueden ser categorizadas como 'aware' o 'naive' dependiendo de si contienen o no información de zona horaria. Para aplicaciones que requieran objetos 'aware', las clases datetime y time tienen un atributo tzinfo para especificar la zona horaria.",
   "Este texto es una guía de Python para el uso de funcionalidades dependientes del sistema operativo. Se recomienda el uso de ciertas funciones ya establecidas para la manipulación de archivos, rutas, manejo de procesos, entre otros. Se menciona que estas funciones pueden ser usadas en diferentes sistemas operativos, pero se advierte que algunas extensiones pueden ser una amenaza para la portabilidad. También se señala que todas las funciones aceptan tanto bytes como string como entrada y que algunas no están disponibles en ciertos sistemas operativos. Finalmente, se mencionan excepciones que pueden ser causadas por argumentos inválidos o inaccesibles.",
   "os.path es un módulo en Python que contiene funciones útiles para manipular rutas de archivos y directorios. Es importante señalar que Python no realiza automáticamente expansiones de ruta, por lo que es necesario usar funciones como expanduser() y expandvars(). Además, existen distintas versiones de este módulo dependiendo del sistema operativo, como posixpath para rutas de Unix y ntpath para rutas de Windows. Por último, algunas funciones en este módulo fueron modificadas en la versión 3.8 y aceptan objetos tipo ruta.",
]

